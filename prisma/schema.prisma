generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id           Int         @id @default(autoincrement())
  read         Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  commentId    Int
  taggedUserId Int?
  comment      Comment     @relation(fields: [commentId], references: [id])
  taggedUser   TaggedUser? @relation(fields: [taggedUserId], references: [id])
}

model TaggedUser {
  id           Int            @id @default(autoincrement())
  commentId    Int
  userId       String
  Notification Notification[]
  comment      Comment        @relation(fields: [commentId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
}

model Comment {
  id          Int            @id @default(autoincrement())
  body        String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  x           Int            @default(0)
  y           Int            @default(0)
  width       Int            @default(0)
  height      Int            @default(0)
  authorId    String
  imageId     Int
  user        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  image       Image          @relation(fields: [imageId], references: [id])
  notified    Notification[]
  taggedUsers TaggedUser[]
}

model Image {
  id          Int       @id @default(autoincrement())
  url         String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  comments    Comment[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  commentId      Int?
  accounts       Account[]
  comments       Comment[]
  images         Image[]
  Post           Post[]
  sessions       Session[]
  taggedComments TaggedUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
